package automaticMalwareDetection;

public class bayesianClassification {
    public static void main(String[] args) {
		int[][] featureDets = {
				{42, 742},
				{35, 455},
				{16, 152},
				{0, 169},
                {87, 252},
                {99, 254},
                {754, 125},
                {5, 107}
		};
		boolean[] featureAppears = {true, false, true, false, false, true, true, true};
		boolean result = isMalware(featureDets, featureAppears, 1000.0);
		System.out.println(result);
		
		System.out.println();
		System.out.println();
		
        // incorrect by a large margin, need to check this
		result = isMalware(featureDets, featureAppears, 1000.0, 2);
		System.out.println(result);
	}
	
	/**
	 * 
	 * @param featureData [[number of times appears in benign, number of times appears in malware]] each inner array is a feature
	 * @param featureAppear - A true if the index of the feature appears and false if not
	 */
	private static boolean isMalware(int[][] featureData, boolean[] featureAppear, double sampleSize) {
		int[] benignTimes = new int[featureData.length];
		int[] malwareTimes = new int[featureData.length];
		
		for(int i=0; i<featureData.length; i++) {
			benignTimes[i] = featureData[i][0];
			malwareTimes[i] = featureData[i][1];
		}
		
		System.out.println("Benign calculation:");
		double probForBenign = probCalculation(benignTimes, featureAppear, sampleSize); 
		System.out.println("Benign prob = " + probForBenign);
		System.out.println();
		
		System.out.println("Malware calculation:");
		double probForMalware = probCalculation(malwareTimes, featureAppear, sampleSize);
		System.out.println("Malware prob = " + probForMalware);
		System.out.println();
		
		return probForMalware > probForBenign;
	}

	private static double probCalculation(int[] featureData, boolean[] featureAppear, double sampleSize) {
		double prob = 1.0; // this is 1 as it multiplies
		for(int i=0; i<featureData.length; i++) {
			double result = 0;
			System.out.print("feature " + i);
			if(featureAppear[i]) {
				result = featureData[i]/sampleSize;
				System.out.print(" appears, " + featureData[i] + "/" + sampleSize + " = ");
			} else {
				result = 1-(featureData[i]/sampleSize);
				System.out.print(" does not appear, 1-(" + featureData[i] + "/" + sampleSize + ") = ");
			}
			System.out.print(result);
			System.out.println();
			prob *= result;
		}
		
		return prob;
	}
	
	/**
	 * 
	 * @param featureData [[number of times appears in benign, number of times appears in malware]] each inner array is a feature
	 * @param featureAppear - A true if the index of the feature appears and false if not
	 * @param dp - the decimal places to work out the calculation too
	 */
	private static boolean isMalware(int[][] featureData, boolean[] featureAppear, double sampleSize, int dp) {
		int[] benignTimes = new int[featureData.length];
		int[] malwareTimes = new int[featureData.length];
		
		for(int i=0; i<featureData.length; i++) {
			benignTimes[i] = featureData[i][0];
			malwareTimes[i] = featureData[i][1];
		}
		
		System.out.println("Benign calculation:");
		double probForBenign = probCalculation(benignTimes, featureAppear, sampleSize, dp); 
		System.out.println("Benign prob = " + probForBenign);
		System.out.println();
		
		System.out.println("Malware calculation:");
		double probForMalware = probCalculation(malwareTimes, featureAppear, sampleSize, dp);
		System.out.println("Malware prob = " + probForMalware);
		System.out.println();
		
		return probForMalware > probForBenign;
	}
	
	private static double probCalculation(int[] featureData, boolean[] featureAppear, double sampleSize, int dp) {
		double prob = 1.0; // this is 1 as it multiplies
		for(int i=0; i<featureData.length; i++) {
			double result = 0;
			System.out.print("feature " + i);
			if(featureAppear[i]) {
				result = featureData[i]/sampleSize;
				System.out.print(" appears");
			} else {
				result = 1-(featureData[i]/sampleSize);
				System.out.print(" does not appear");
			}
			result = Math.round(result * Math.pow(10, dp)) / Math.pow(10, dp);
			System.out.print(" and the result is " + result);
			System.out.println();
			prob *= result;
		}
		
		return prob;
	}
}
